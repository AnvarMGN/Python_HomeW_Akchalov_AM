
# Задача 34:
#   Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, 
# Вам стоит написать программу. 
# Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) 
# в каждой фразе стихотворения одинаковое. 
# Фраза может состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами. 
# Фразы отделяются друг от друга пробелами. 
# Стихотворение  Винни-Пух вбивает в программу с клавиатуры. 
# В ответе напишите “Парам пам-пам”, если с ритмом все в порядке и 
# “Пам парам”, если с ритмом все не в порядке.

# *Пример: 
# **Ввод:** пара-ра-рам рам-пам-папам па-ра-па-да  
# **Вывод:** Парам пам-пам

#poem = 'пара-ра-рам рам-пам-папам па-ра-па-да'
"""
def find_phrase(poem):

    vow_let = 'аеиоуыэюя'   # список гласных, для использования разных фраз в стихотворении
    count = 0               # счётчик гласных в одной фразе
    count_list =[]          # список счётчиков фраз

    for let in range(len(poem)):        # сравним фразу с со списком
        for vow in range(len(vow_let)):
            if poem[let] == vow_let[vow]:
                count += 1
        if poem[let] == ' ':            # делим фразы
            count_list.append(count)
            count = 0
        if let == len(poem) - 1:        # добавление последней фразы в список, когда цикл дойдёт 
            count_list.append(count)    # до последнего индекса
    return count_list

def find_rhythm(list):
    print('Парам пам-пам') if len(set(list)) == 1 else print('Пам парам')
    # переводим список во множество и сравниваем длину

poem_VP = input('Введите фразу: ').lower()
find_rhythm(find_phrase(poem_VP))
"""
# Задача 36: 
# Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6), 
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца. 
# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, 
# которые должны быть распечатаны. 
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля). 
# Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, 
# как, например, у операции умножения.

# *Пример:*

# **Ввод:** `print_operation_table(lambda x, y: x * y) ` 
# **Вывод:**
# 1 2 3 4 5 6
# 2 4 6 8 10 12
# 3 6 9 12 15 18
# 4 8 12 16 20 24
# 5 10 15 20 25 30
# 6 12 18 24 30 36

def print_prod_operation(func,a,b):
    for i in range(1,a+1):
        for j in range(1,b+1):
            prod = func(i,j)
            print(prod, end = ' ')
        print()

x = int(input("Введите количество строк: "))
y = int(input("Введите количество столбцов: "))
print_prod_operation(lambda x,y: x*y)

# def print_operation_table(operation, num_rows=6, num_columns=6):
#     for i in range(1, num_rows + 1):
#         prod_list = []
#         for j in range(1, num_columns + 1):
#             prod_list.append(operation(i, j))
#         print(prod_list)
 
# print_operation_table(lambda x, y: x * y)